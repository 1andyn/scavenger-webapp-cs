{"version":3,"sources":["datasource/rawdata.txt","components/Gallery.tsx","components/TextBlock.tsx","components/Loader.tsx","components/App.tsx","reportWebVitals.ts","index.tsx"],"names":["Gallery","images","useState","index","set","transitions","useTransition","key","from","opacity","enter","leave","config","duration","useEffect","t","setInterval","state","length","clearTimeout","style","i","img","className","src","text","div","Loader","a","fetch","resp","ok","fileBuffer","Error","lines","toString","split","lineSegment","result","currentStep","prompt","answer","intermission","interImages","forEach","line","getParsedData","getImageData","push","keyword","segment","copy","replace","trim","copyArray","appearanceDelaySlow","App","initialized","setInitialized","showInterim","setShowInterim","isLoading","setIsLoading","stepCount","setStepCount","hideButtons","setHidebuttons","showGallery","setShowGallery","showButton","setShowButton","badAnswer","setBadAnswer","stepData","setStepData","imageSource","setImageSource","imageQueue","setImageQueue","textQueue","setTextQueue","textBlock","setTextBlock","setAnswer","timeout","delay","Promise","res","setTimeout","clickContinue","window","checkAnswer","showBadAnswer","then","data","id","in","color","TextBlock","onClick","name","placeholder","type","value","onKeyDown","event","onChange","e","target","disabled","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d15f8571.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/rawdata.a62c799f.txt\";","import React, { useState, useEffect } from 'react'\r\nimport { useTransition, animated } from '@react-spring/web'\r\nimport '../css/images.css';\r\n\r\nconst Gallery = (images: string[]) => {\r\n\r\n    const [index, set] = useState(0)\r\n    const transitions = useTransition(index, {\r\n        key: index,\r\n        from: { opacity: 0 },\r\n        enter: { opacity: 1 },\r\n        leave: { opacity: 0 },\r\n        config: { duration: 4500 },\r\n    })\r\n\r\n    useEffect(() => {\r\n        const t = setInterval(() => set(state => (state + 1) % images.length), 4500)\r\n        return () => clearTimeout(t)\r\n    }, [images])\r\n\r\n    return (\r\n        <div>\r\n            {transitions((style, i) => (\r\n                <animated.img\r\n                    className='imageBlock dropShadow'\r\n                    src={images[i]}\r\n                    style={{ ...style }}\r\n                />\r\n            ))}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Gallery;","import { useSpring, animated } from 'react-spring'\r\nimport '../css/text.css';\r\n\r\nconst Gallery = (text: string) => {\r\n\r\n    return (\r\n        <animated.div className='textBox'>{text}</animated.div>\r\n    );\r\n}\r\n\r\nexport default Gallery;","\r\nconst Loader = async (text : string) => {\r\n\r\n    var fileBuffer\r\n    const resp = await fetch(text)\r\n    if(resp.ok) {\r\n        fileBuffer = await resp.text()\r\n    }\r\n\r\n    if(!fileBuffer) {\r\n        throw Error(\"File Buffer is empty!\")\r\n    }\r\n    const lines = fileBuffer.toString().split('\\n');\r\n\r\n    var lineSegment = 0\r\n    var result : Array<{prompt: string, images: Array<string>, answer: string, intermission: string, interImages: Array<string>}> = []\r\n    var currentStep = { prompt: '', images: [] as any, answer: '', intermission: '', interImages: [] as any }\r\n    lines.forEach((line) => {\r\n        switch (lineSegment % 5) {\r\n            case 0:\r\n                currentStep.prompt = getParsedData('prompt:', line, lineSegment)\r\n                break;\r\n            case 1:\r\n                currentStep.images = getImageData('images:', line, lineSegment)\r\n                break;\r\n            case 2:\r\n                currentStep.answer = getParsedData('answer:', line, lineSegment)\r\n                break;\r\n            case 3:\r\n                currentStep.intermission = getParsedData('intermission:', line, lineSegment)\r\n                break;\r\n            case 4:\r\n                currentStep.interImages = getImageData('interImages:', line, lineSegment)\r\n                result.push(currentStep);\r\n                currentStep = { prompt: '', images: [] as any, answer: '', intermission: '', interImages: [] as any }\r\n                break;\r\n            default:\r\n                throw Error('Line could not be parsed correctly...')\r\n        }\r\n\r\n        lineSegment++;\r\n    })\r\n\r\n    return result\r\n}\r\n\r\nconst getParsedData = (keyword : string, line : string, segment : number) => {\r\n    let copy = line.replace(keyword, '')\r\n    if (copy.length === line.length) {\r\n        throw new Error(`Expected '${keyword}' keyword in line ${segment} but didn't.`)\r\n    }\r\n    copy = copy.trim()\r\n    return copy\r\n}\r\n\r\nconst getImageData = (keyword : string, line : string, segment : number) => {\r\n    let copy = line.replace(keyword, '')\r\n    copy = copy.trim()\r\n    if (keyword !== 'images:' && keyword !== 'interImages:') {\r\n        throw new Error(`Expected '${keyword}' keyword in line ${segment} but didn't.`)\r\n    }\r\n    let copyArray = copy.split(',')\r\n    copyArray.forEach((line) => {\r\n        line = line.trim()\r\n    })\r\n    return copyArray\r\n}\r\n\r\nexport default Loader;","import React, { useEffect, useState } from 'react';\r\nimport { Button, Col, FormGroup, Input, InputGroup, Row, Spinner, Alert, Fade } from 'reactstrap';\r\nimport text from '../datasource/rawdata.txt'\r\nimport '../css/main.css';\r\n\r\n// Components (Spring Based for Nice Appearances)\r\nimport Gallery from './Gallery'\r\nimport TextBlock from './TextBlock'\r\nimport Loader from './Loader'\r\n\r\nconst appearanceDelaySlow = 2000\r\nconst alertDisplay = 3500\r\nconst App = () => {\r\n\r\n  const [initialized, setInitialized] = useState<boolean>(false)\r\n  const [showInterim, setShowInterim] = useState<boolean>(true)\r\n  const [isLoading, setIsLoading] = useState<boolean>(true)\r\n  const [stepCount, setStepCount] = useState<number>(0)\r\n  const [hideButtons, setHidebuttons] = useState<boolean>(false)\r\n\r\n  const [showGallery, setShowGallery] = useState<boolean>(false)\r\n  const [showButton, setShowButton] = useState<boolean>(false)\r\n  const [badAnswer, setBadAnswer] = useState<boolean>(false)\r\n\r\n  let testImages = [\r\n    'https://dl.dropboxusercontent.com/s/hu56wv0v1rglu6f/t1.jpg',\r\n    'https://dl.dropboxusercontent.com/s/izvhx8q1se29znb/t2.jpg',\r\n    'https://dl.dropboxusercontent.com/s/du03z2peh0pbkkn/t3.jpg'\r\n  ]\r\n\r\n  const [stepData, setStepData] = useState<{\r\n    prompt: string,\r\n    images: string[],\r\n    answer: string,\r\n    intermission: string,\r\n    interImages: string[]\r\n  }[]>([])\r\n\r\n  const [imageSource, setImageSource] = useState<string[]>(testImages);\r\n  const [imageQueue, setImageQueue] = useState<string[]>([]);\r\n  const [textQueue, setTextQueue] = useState<string>('There is nothing in the queue...');\r\n  const [textBlock, setTextBlock] = useState<string>('Welcome to the Scavenger Hunt, click continue to Start!');\r\n  const [answer, setAnswer] = useState<string>('')\r\n\r\n  const timeout = (delay: number) => {\r\n    return new Promise(res => setTimeout(res, delay));\r\n  }\r\n\r\n  const initialize = () => {\r\n    if (typeof stepData != 'undefined') {\r\n      setTextQueue(stepData[stepCount].prompt)\r\n      setImageQueue(stepData[stepCount].images)\r\n    }\r\n  }\r\n\r\n  const clickContinue = async () => {\r\n    setIsLoading(true)\r\n    setShowGallery(false)\r\n    setShowButton(false)\r\n\r\n    window.setTimeout(()=>{\r\n      setTextBlock(textQueue); //Set text to be the next prompt\r\n      setImageSource(imageQueue);\r\n      setShowInterim(false); //Hide interim logic\r\n    },appearanceDelaySlow)\r\n\r\n    window.setTimeout(()=>{\r\n      setShowGallery(true)\r\n      setShowButton(true)\r\n      setIsLoading(false)\r\n    },appearanceDelaySlow)\r\n\r\n    setTextQueue(stepData[stepCount].intermission)\r\n    setImageQueue(stepData[stepCount].interImages)\r\n  }\r\n\r\n  const checkAnswer = async () => {\r\n    setIsLoading(true)\r\n\r\n    if (answer === stepData[stepCount].answer) {\r\n      setShowGallery(false)\r\n      setShowButton(false)\r\n\r\n      window.setTimeout(()=>{\r\n        setTextBlock(textQueue) //this should be showing intermission\r\n        setImageSource(imageQueue) //this is the intermission images\r\n      },appearanceDelaySlow)\r\n\r\n      if (stepCount + 1 === stepData.length) {\r\n        setHidebuttons(true)\r\n      } else {\r\n        setTextQueue(stepData[stepCount + 1].prompt)\r\n        setImageQueue(stepData[stepCount + 1].images)\r\n        setStepCount(stepCount + 1)\r\n        setAnswer('')\r\n        setShowInterim(true)\r\n      }\r\n\r\n      window.setTimeout(()=>{\r\n        setShowGallery(true)\r\n        setShowButton(true)\r\n        setIsLoading(false)\r\n      },appearanceDelaySlow)\r\n\r\n    } else {\r\n      setAnswer('')\r\n      showBadAnswer()\r\n      window.setTimeout(()=>{\r\n        setIsLoading(false)\r\n      },appearanceDelaySlow)\r\n    }\r\n\r\n  }\r\n\r\n  const handleKeyDown = (event: React.KeyboardEvent) => {\r\n    if (event.key === 'Enter') {\r\n      checkAnswer()\r\n    }\r\n  }\r\n\r\n  /* Run Once Initialization */\r\n  useEffect(() => {\r\n    if (!initialized) {\r\n      setInitialized(true)\r\n      Loader(text).then(async (data) => {\r\n        setStepData(data)\r\n        setShowGallery(true)\r\n        await timeout(appearanceDelaySlow)\r\n        setShowButton(true)\r\n      })\r\n    }\r\n  }, [initialized]);\r\n\r\n  useEffect(() => {\r\n    if (stepData.length !== 0) {\r\n      initialize()\r\n      setIsLoading(false)\r\n    }\r\n  }, [stepData]);\r\n\r\n  const showBadAnswer = () => {\r\n    setBadAnswer(true)\r\n    window.setTimeout(()=>{\r\n      setBadAnswer(false)\r\n    },alertDisplay)\r\n  }\r\n\r\n  return (\r\n    <div className=\"d-flex align-items-center min-vh-100\">\r\n      <div className=\"container\">\r\n        <Row>\r\n          <Fade id='alertFade' in={badAnswer}>\r\n            <Alert color=\"danger alertText\">\r\n              <div className=\"text-center\">The answer entered is incorrect! Try again!</div>\r\n            </Alert>\r\n          </Fade>\r\n        </Row>\r\n        <Row>\r\n          <Col className='m-4' id='imageBox'>\r\n            <Fade in={showGallery}>{Gallery(imageSource)}</Fade>\r\n          </Col>\r\n          <Col className='m-4' id='textBox'>\r\n            <Fade in={showGallery} className='text-box-center'>{TextBlock(textBlock)}</Fade>\r\n          </Col>\r\n        </Row>\r\n        <Fade in={showButton}>\r\n        {hideButtons ? null :\r\n          isLoading ? (<div className='d-flex justify-content-center'><Spinner>Loading...</Spinner></div>) :\r\n            showInterim ? (\r\n              <Row>\r\n                <div className=\"d-flex justify-content-center\"><Button className='continueButton dropShadowBtn' onClick={() => clickContinue()}>Continue</Button></div>\r\n              </Row>\r\n            ) : (\r\n              <Row>\r\n                <div className='d-flex justify-content-center'>\r\n                  <FormGroup>\r\n                    <InputGroup className=\"continueButton\">\r\n                      <Input\r\n                        id=\"inputPassword\"\r\n                        name=\"password\"\r\n                        placeholder=\"answer\"\r\n                        type=\"password\"\r\n                        value={answer}\r\n                        onKeyDown={handleKeyDown}\r\n                        onChange={(e) => setAnswer(e.target.value)}\r\n                      />\r\n                      <Button disabled={answer === ''} onClick={() => checkAnswer()}>{'>'}</Button></InputGroup>\r\n                  </FormGroup>\r\n                </div>\r\n              </Row>\r\n            )\r\n        }\r\n        </Fade>\r\n\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport App from './components/App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}