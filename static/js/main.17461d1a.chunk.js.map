{"version":3,"sources":["datasource/rawdata.txt","components/Gallery.tsx","components/TextBlock.tsx","components/Loader.tsx","components/App.tsx","reportWebVitals.ts","index.tsx"],"names":["Gallery","images","useState","index","set","transitions","useTransition","key","from","opacity","enter","leave","config","duration","useEffect","t","setInterval","state","length","clearTimeout","style","i","img","className","src","text","div","Loader","a","fetch","resp","ok","fileBuffer","Error","lines","toString","split","lineSegment","result","currentStep","prompt","answer","intermission","interImages","forEach","line","getParsedData","getImageData","push","keyword","segment","copy","replace","trim","copyArray","appearanceDelaySlow","App","initialized","setInitialized","showInterim","setShowInterim","isLoading","setIsLoading","stepCount","setStepCount","hideButtons","setHidebuttons","showGallery","setShowGallery","showButton","setShowButton","badAnswer","setBadAnswer","stepData","setStepData","imageSource","setImageSource","imageQueue","setImageQueue","textQueue","setTextQueue","textBlock","setTextBlock","setAnswer","timeout","delay","Promise","res","setTimeout","clickContinue","window","checkAnswer","showBadAnswer","then","data","id","in","color","TextBlock","onClick","name","placeholder","type","value","onKeyDown","event","onChange","e","target","disabled","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.17461d1a.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/rawdata.07c7f448.txt\";","import React, { useState, useEffect } from 'react'\nimport { useTransition, animated } from '@react-spring/web'\nimport '../css/images.css';\n\nconst Gallery = (images: string[]) => {\n\n    const [index, set] = useState(0)\n    const transitions = useTransition(index, {\n        key: index,\n        from: { opacity: 0 },\n        enter: { opacity: 1 },\n        leave: { opacity: 0 },\n        config: { duration: 4500 },\n    })\n\n    useEffect(() => {\n        const t = setInterval(() => set(state => (state + 1) % images.length), 4500)\n        return () => clearTimeout(t)\n    }, [images])\n\n    return (\n        <div>\n            {transitions((style, i) => (\n                <animated.img\n                    className='imageBlock dropShadow'\n                    src={images[i]}\n                    style={{ ...style }}\n                />\n            ))}\n        </div>\n    );\n}\n\nexport default Gallery;","import { useSpring, animated } from 'react-spring'\nimport '../css/text.css';\n\nconst Gallery = (text: string) => {\n\n    return (\n        <animated.div className='textBox'>{text}</animated.div>\n    );\n}\n\nexport default Gallery;","\nconst Loader = async (text : string) => {\n\n    var fileBuffer\n    const resp = await fetch(text)\n    if(resp.ok) {\n        fileBuffer = await resp.text()\n    }\n\n    if(!fileBuffer) {\n        throw Error(\"File Buffer is empty!\")\n    }\n    const lines = fileBuffer.toString().split('\\n');\n\n    var lineSegment = 0\n    var result : Array<{prompt: string, images: Array<string>, answer: string, intermission: string, interImages: Array<string>}> = []\n    var currentStep = { prompt: '', images: [] as any, answer: '', intermission: '', interImages: [] as any }\n    lines.forEach((line) => {\n        switch (lineSegment % 5) {\n            case 0:\n                currentStep.prompt = getParsedData('prompt:', line, lineSegment)\n                break;\n            case 1:\n                currentStep.images = getImageData('images:', line, lineSegment)\n                break;\n            case 2:\n                currentStep.answer = getParsedData('answer:', line, lineSegment)\n                break;\n            case 3:\n                currentStep.intermission = getParsedData('intermission:', line, lineSegment)\n                break;\n            case 4:\n                currentStep.interImages = getImageData('interImages:', line, lineSegment)\n                result.push(currentStep);\n                currentStep = { prompt: '', images: [] as any, answer: '', intermission: '', interImages: [] as any }\n                break;\n            default:\n                throw Error('Line could not be parsed correctly...')\n        }\n\n        lineSegment++;\n    })\n\n    return result\n}\n\nconst getParsedData = (keyword : string, line : string, segment : number) => {\n    let copy = line.replace(keyword, '')\n    if (copy.length === line.length) {\n        throw new Error(`Expected '${keyword}' keyword in line ${segment} but didn't.`)\n    }\n    copy = copy.trim()\n    return copy\n}\n\nconst getImageData = (keyword : string, line : string, segment : number) => {\n    let copy = line.replace(keyword, '')\n    copy = copy.trim()\n    if (keyword !== 'images:' && keyword !== 'interImages:') {\n        throw new Error(`Expected '${keyword}' keyword in line ${segment} but didn't.`)\n    }\n    let copyArray = copy.split(',')\n    copyArray.forEach((line) => {\n        line = line.trim()\n    })\n    return copyArray\n}\n\nexport default Loader;","import React, { useEffect, useState } from 'react';\nimport { Button, Col, FormGroup, Input, InputGroup, Row, Spinner, Alert, Fade } from 'reactstrap';\nimport text from '../datasource/rawdata.txt'\nimport '../css/main.css';\n\n// Components (Spring Based for Nice Appearances)\nimport Gallery from './Gallery'\nimport TextBlock from './TextBlock'\nimport Loader from './Loader'\n\nconst appearanceDelaySlow = 2000\nconst alertDisplay = 3500\nconst App = () => {\n\n  const [initialized, setInitialized] = useState<boolean>(false)\n  const [showInterim, setShowInterim] = useState<boolean>(true)\n  const [isLoading, setIsLoading] = useState<boolean>(true)\n  const [stepCount, setStepCount] = useState<number>(0)\n  const [hideButtons, setHidebuttons] = useState<boolean>(false)\n\n  const [showGallery, setShowGallery] = useState<boolean>(false)\n  const [showButton, setShowButton] = useState<boolean>(false)\n  const [badAnswer, setBadAnswer] = useState<boolean>(false)\n\n  let testImages = [\n    'https://dl.dropboxusercontent.com/s/hu56wv0v1rglu6f/t1.jpg',\n    'https://dl.dropboxusercontent.com/s/izvhx8q1se29znb/t2.jpg',\n    'https://dl.dropboxusercontent.com/s/du03z2peh0pbkkn/t3.jpg'\n  ]\n\n  const [stepData, setStepData] = useState<{\n    prompt: string,\n    images: string[],\n    answer: string,\n    intermission: string,\n    interImages: string[]\n  }[]>([])\n\n  const [imageSource, setImageSource] = useState<string[]>(testImages);\n  const [imageQueue, setImageQueue] = useState<string[]>([]);\n  const [textQueue, setTextQueue] = useState<string>('There is nothing in the queue...');\n  const [textBlock, setTextBlock] = useState<string>('Welcome to the Scavenger Hunt, click continue to Start!');\n  const [answer, setAnswer] = useState<string>('')\n\n  const timeout = (delay: number) => {\n    return new Promise(res => setTimeout(res, delay));\n  }\n\n  const initialize = () => {\n    if (typeof stepData != 'undefined') {\n      setTextQueue(stepData[stepCount].prompt)\n      setImageQueue(stepData[stepCount].images)\n    }\n  }\n\n  const clickContinue = async () => {\n    setIsLoading(true)\n    setShowGallery(false)\n    setShowButton(false)\n\n    window.setTimeout(() => {\n      setTextBlock(textQueue); //Set text to be the next prompt\n      setImageSource(imageQueue);\n      setShowInterim(false); //Hide interim logic\n    }, appearanceDelaySlow)\n\n    window.setTimeout(() => {\n      setShowGallery(true)\n      setShowButton(true)\n      setIsLoading(false)\n    }, appearanceDelaySlow)\n\n    setTextQueue(stepData[stepCount].intermission)\n    setImageQueue(stepData[stepCount].interImages)\n  }\n\n  const checkAnswer = async () => {\n    setIsLoading(true)\n\n    if (answer === stepData[stepCount].answer) {\n      setShowGallery(false)\n      setShowButton(false)\n\n      window.setTimeout(() => {\n        setTextBlock(textQueue) //this should be showing intermission\n        setImageSource(imageQueue) //this is the intermission images\n      }, appearanceDelaySlow)\n\n      if (stepCount + 1 === stepData.length) {\n        setHidebuttons(true)\n      } else {\n        setTextQueue(stepData[stepCount + 1].prompt)\n        setImageQueue(stepData[stepCount + 1].images)\n        setStepCount(stepCount + 1)\n        setAnswer('')\n        setShowInterim(true)\n      }\n\n      window.setTimeout(() => {\n        setShowGallery(true)\n        setShowButton(true)\n        setIsLoading(false)\n      }, appearanceDelaySlow)\n\n    } else {\n      setAnswer('')\n      showBadAnswer()\n      window.setTimeout(() => {\n        setIsLoading(false)\n      }, appearanceDelaySlow)\n    }\n\n  }\n\n  const handleKeyDown = (event: React.KeyboardEvent) => {\n    if (event.key === 'Enter') {\n      checkAnswer()\n    }\n  }\n\n  /* Run Once Initialization */\n  useEffect(() => {\n    if (!initialized) {\n      setInitialized(true)\n      Loader(text).then(async (data) => {\n        setStepData(data)\n        setShowGallery(true)\n        await timeout(appearanceDelaySlow)\n        setShowButton(true)\n      })\n    }\n  }, [initialized]);\n\n  useEffect(() => {\n    if (stepData.length !== 0) {\n      initialize()\n      setIsLoading(false)\n    }\n  }, [stepData]);\n\n  const showBadAnswer = () => {\n    setBadAnswer(true)\n    window.setTimeout(() => {\n      setBadAnswer(false)\n    }, alertDisplay)\n  }\n\n  return (\n    <div className=\"d-flex align-items-center min-vh-100\">\n      <div className=\"container\">\n        <Fade className='alertOntop' id='alertFade' in={badAnswer} >\n          <Alert color=\"danger alertText\">\n            <span>The answer entered is incorrect! Try again!</span>\n          </Alert>\n        </Fade>\n        <Row>\n          <Col className='m-4' id='imageBox'>\n            <Fade in={showGallery}>{Gallery(imageSource)}</Fade>\n          </Col>\n          <Col className='m-4' id='textBox'>\n            <Fade in={showGallery} className='text-box-center'>{TextBlock(textBlock)}</Fade>\n          </Col>\n        </Row>\n        <Fade in={showButton}>\n          <Row className='btn-max-height'>\n            {hideButtons ? null :\n              isLoading ? (<Fade in={isLoading}><div className='d-flex justify-content-center'><Spinner>Loading...</Spinner></div></Fade>) :\n                showInterim ? (\n                  <Fade in={showInterim}><div className=\"d-flex justify-content-center\"><Button className='continueButton dropShadowBtn' onClick={() => clickContinue()}>Continue</Button></div></Fade>\n                ) : (\n                  <Fade in={!showInterim}>\n                    <div className='d-flex justify-content-center'>\n                      <FormGroup>\n                        <InputGroup className=\"continueButton\">\n                          <Input\n                            id=\"inputPassword\"\n                            name=\"password\"\n                            placeholder=\"answer\"\n                            type=\"password\"\n                            value={answer}\n                            onKeyDown={handleKeyDown}\n                            onChange={(e) => setAnswer(e.target.value)}\n                          />\n                          <Button disabled={answer === ''} onClick={() => checkAnswer()}>\n                            <i className=\"fas fa-fighter-jet\"></i>\n                          </Button></InputGroup>\n                      </FormGroup>\n                    </div>\n                  </Fade>\n                )\n            }\n          </Row>\n        </Fade>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}